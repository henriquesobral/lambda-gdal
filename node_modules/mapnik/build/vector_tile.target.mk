# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := vector_tile
DEFS_Debug := \
	'-DNODE_GYP_MODULE_NAME=vector_tile' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-std=c++11 \
	-std=c++11 \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++0x \
	-D_THREAD_SAFE \
	-I/home/ec2-user/lambda/local/include \
	-I/home/ec2-user/lambda/local/include/mapnik/agg \
	-I/home/ec2-user/lambda/local/include \
	-I/home/ec2-user/lambda/local/include/freetype2 \
	-I/usr/include \
	-I/home/ec2-user/lambda/local/include/cairo \
	-I/home/ec2-user/lambda/local/include/glib-2.0 \
	-I/home/ec2-user/lambda/local/lib/glib-2.0/include \
	-I/home/ec2-user/lambda/local/include/pixman-1 \
	-I/home/ec2-user/lambda/local/include/libpng16 \
	-DMAPNIK_MEMORY_MAPPED_FILE \
	-DMAPNIK_HAS_DLCFN \
	-DBIGINT \
	-DBOOST_REGEX_HAS_ICU \
	-DHAVE_JPEG \
	-DMAPNIK_USE_PROJ4 \
	-DHAVE_PNG \
	-DLINUX \
	-DMAPNIK_THREADSAFE \
	-DBOOST_SPIRIT_NO_PREDEFINED_TERMINALS=1 \
	-DBOOST_PHOENIX_NO_PREDEFINED_TERMINALS=1 \
	-DBOOST_SPIRIT_USE_PHOENIX_V3=1 \
	-DHAVE_CAIRO \
	-DGRID_RENDERER \
	-std=c++11 \
	-Wall \
	-pthread \
	-ftemplate-depth-300 \
	-Wsign-compare \
	-Wshadow \
	-Wno-sign-compare

INCS_Debug := \
	-I/home/ec2-user/.node-gyp/4.2.2/include/node \
	-I/home/ec2-user/.node-gyp/4.2.2/src \
	-I/home/ec2-user/.node-gyp/4.2.2/deps/uv/include \
	-I/home/ec2-user/.node-gyp/4.2.2/deps/v8/include \
	-I$(obj)/gen

DEFS_Release := \
	'-DNODE_GYP_MODULE_NAME=vector_tile' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-pthread \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-m64 \
	-O3 \
	-ffunction-sections \
	-fdata-sections \
	-fno-omit-frame-pointer

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-std=c++11 \
	-std=c++11 \
	-fno-rtti \
	-fno-exceptions \
	-std=gnu++0x \
	-D_THREAD_SAFE \
	-I/home/ec2-user/lambda/local/include \
	-I/home/ec2-user/lambda/local/include/mapnik/agg \
	-I/home/ec2-user/lambda/local/include \
	-I/home/ec2-user/lambda/local/include/freetype2 \
	-I/usr/include \
	-I/home/ec2-user/lambda/local/include/cairo \
	-I/home/ec2-user/lambda/local/include/glib-2.0 \
	-I/home/ec2-user/lambda/local/lib/glib-2.0/include \
	-I/home/ec2-user/lambda/local/include/pixman-1 \
	-I/home/ec2-user/lambda/local/include/libpng16 \
	-DMAPNIK_MEMORY_MAPPED_FILE \
	-DMAPNIK_HAS_DLCFN \
	-DBIGINT \
	-DBOOST_REGEX_HAS_ICU \
	-DHAVE_JPEG \
	-DMAPNIK_USE_PROJ4 \
	-DHAVE_PNG \
	-DLINUX \
	-DMAPNIK_THREADSAFE \
	-DBOOST_SPIRIT_NO_PREDEFINED_TERMINALS=1 \
	-DBOOST_PHOENIX_NO_PREDEFINED_TERMINALS=1 \
	-DBOOST_SPIRIT_USE_PHOENIX_V3=1 \
	-DNDEBUG \
	-DHAVE_CAIRO \
	-DGRID_RENDERER \
	-std=c++11 \
	-Wall \
	-pthread \
	-ftemplate-depth-300 \
	-Wsign-compare \
	-Wshadow \
	-O3 \
	-Wno-sign-compare

INCS_Release := \
	-I/home/ec2-user/.node-gyp/4.2.2/include/node \
	-I/home/ec2-user/.node-gyp/4.2.2/src \
	-I/home/ec2-user/.node-gyp/4.2.2/deps/uv/include \
	-I/home/ec2-user/.node-gyp/4.2.2/deps/v8/include \
	-I$(obj)/gen

OBJS := \
	$(obj).target/$(TARGET)/gen/vector_tile.pb.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/make_vector_tile.stamp

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS := \
	-lprotobuf-lite

$(obj).target/vector_tile.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/vector_tile.a: LIBS := $(LIBS)
$(obj).target/vector_tile.a: TOOLSET := $(TOOLSET)
$(obj).target/vector_tile.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/vector_tile.a
# Add target alias
.PHONY: vector_tile
vector_tile: $(obj).target/vector_tile.a

# Add target alias to "all" target.
.PHONY: all
all: vector_tile

# Add target alias
.PHONY: vector_tile
vector_tile: $(builddir)/vector_tile.a

# Copy this to the static library output path.
$(builddir)/vector_tile.a: TOOLSET := $(TOOLSET)
$(builddir)/vector_tile.a: $(obj).target/vector_tile.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/vector_tile.a
# Short alias for building this static library.
.PHONY: vector_tile.a
vector_tile.a: $(obj).target/vector_tile.a $(builddir)/vector_tile.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/vector_tile.a

